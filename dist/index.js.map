{"version":3,"sources":["webpack:///webpack/bootstrap 8fbd3f8a1d6bbd20b6b7","webpack:///./src/index.js","webpack:///./src/utils.js"],"names":["combineChunks","fillInChunks","findAll","findChunks","autoEscape","caseSensitive","defaultFindChunks","sanitize","searchWords","textToHighlight","chunksToHighlight","chunks","totalLength","length","sort","first","second","start","reduce","processedChunks","nextChunk","console","log","prevChunk","pop","end","endIndex","Math","max","push","highlight","defaultSanitize","filter","searchWord","escapeRegExpFn","regex","RegExp","match","exec","index","lastIndex","allChunks","append","forEach","chunk","string","replace"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8fbd3f8a1d6bbd20b6b7","// @flow\n\nexport { combineChunks, fillInChunks, findAll, findChunks } from './utils'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// @flow\n\nexport type Chunk = {|\n  highlight: boolean,\n  start: number,\n  end: number,\n|};\n\n/**\n * Creates an array of chunk objects representing both higlightable and non highlightable pieces of text that match each search word.\n * @return Array of \"chunks\" (where a Chunk is { start:number, end:number, highlight:boolean })\n */\nexport const findAll = ({\n  autoEscape,\n  caseSensitive = false,\n  findChunks = defaultFindChunks,\n  sanitize,\n  searchWords,\n  textToHighlight,\n}: {\n  autoEscape?: boolean,\n  caseSensitive?: boolean,\n  findChunks?: typeof defaultFindChunks,\n  sanitize?: typeof defaultSanitize,\n  searchWords: Array<string>,\n  textToHighlight: string,\n}): Array<Chunk> =>\n  fillInChunks({\n    chunksToHighlight: combineChunks({\n      chunks: findChunks({\n        autoEscape,\n        caseSensitive,\n        sanitize,\n        searchWords,\n        textToHighlight,\n      }),\n    }),\n    totalLength: textToHighlight ? textToHighlight.length : 0,\n  });\n\n/**\n * Takes an array of {start:number, end:number} objects and combines chunks that overlap into single chunks.\n * @return {start:number, end:number}[]\n */\nexport const combineChunks = ({\n  chunks,\n}: {\n  chunks: Array<Chunk>,\n}): Array<Chunk> => {\n  chunks = chunks\n    .sort((first, second) => first.start - second.start)\n    .reduce((processedChunks, nextChunk) => {\n      console.log(\"combine\");\n\n      // First chunk just goes straight in the array...\n      if (processedChunks.length === 0) {\n        return [nextChunk];\n      } else {\n        // ... subsequent chunks get checked to see if they overlap...\n        const prevChunk = processedChunks.pop();\n        if (nextChunk.start <= prevChunk.end) {\n          // It may be the case that prevChunk completely surrounds nextChunk, so take the\n          // largest of the end indeces.\n          const endIndex = Math.max(prevChunk.end, nextChunk.end);\n          processedChunks.push({\n            highlight: false,\n            start: prevChunk.start,\n            end: endIndex,\n          });\n        } else {\n          processedChunks.push(prevChunk, nextChunk);\n        }\n        return processedChunks;\n      }\n    }, []);\n\n  return chunks;\n};\n\n/**\n * Examine text for any matches.\n * If we find matches, add them to the returned array as a \"chunk\" object ({start:number, end:number}).\n * @return {start:number, end:number}[]\n */\nconst defaultFindChunks = ({\n  autoEscape,\n  caseSensitive,\n  sanitize = defaultSanitize,\n  searchWords,\n  textToHighlight,\n}: {\n  autoEscape?: boolean,\n  caseSensitive?: boolean,\n  sanitize?: typeof defaultSanitize,\n  searchWords: Array<string>,\n  textToHighlight: string,\n}): Array<Chunk> => {\n  textToHighlight = sanitize(textToHighlight);\n\n  return searchWords\n    .filter((searchWord) => searchWord) // Remove empty words\n    .reduce((chunks, searchWord) => {\n      searchWord = sanitize(searchWord);\n\n      if (autoEscape) {\n        searchWord = escapeRegExpFn(searchWord);\n      }\n\n      const regex = new RegExp(searchWord, caseSensitive ? \"g\" : \"gi\");\n\n      let match;\n      while ((match = regex.exec(textToHighlight))) {\n        let start = match.index;\n        let end = regex.lastIndex;\n        // We do not return zero-length matches\n        if (end > start) {\n          chunks.push({ highlight: false, start, end });\n        }\n\n        // Prevent browsers like Firefox from getting stuck in an infinite loop\n        // See http://www.regexguru.com/2008/04/watch-out-for-zero-length-matches/\n        if (match.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n      }\n\n      return chunks;\n    }, []);\n};\n// Allow the findChunks to be overridden in findAll,\n// but for backwards compatibility we export as the old name\nexport { defaultFindChunks as findChunks };\n\n/**\n * Given a set of chunks to highlight, create an additional set of chunks\n * to represent the bits of text between the highlighted text.\n * @param chunksToHighlight {start:number, end:number}[]\n * @param totalLength number\n * @return {start:number, end:number, highlight:boolean}[]\n */\nexport const fillInChunks = ({\n  chunksToHighlight,\n  totalLength,\n}: {\n  chunksToHighlight: Array<Chunk>,\n  totalLength: number,\n}): Array<Chunk> => {\n  const allChunks = [];\n  const append = (start, end, highlight) => {\n    if (end - start > 0) {\n      allChunks.push({\n        start,\n        end,\n        highlight,\n      });\n    }\n  };\n\n  if (chunksToHighlight.length === 0) {\n    append(0, totalLength, false);\n  } else {\n    let lastIndex = 0;\n    chunksToHighlight.forEach((chunk) => {\n      append(lastIndex, chunk.start, false);\n      append(chunk.start, chunk.end, true);\n      lastIndex = chunk.end;\n    });\n    append(lastIndex, totalLength, false);\n  }\n  return allChunks;\n};\n\nfunction defaultSanitize(string: string): string {\n  return string;\n}\n\nfunction escapeRegExpFn(string: string): string {\n  return string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}